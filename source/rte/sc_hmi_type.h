
/*
 * Filename: sc_hmi_type.h
 *
 * Author: Autogenerated by H-DA RTE Generator, (c) Prof. Fromm
 */

#ifndef _H_DEFINE_SC_HMI_TYPE
#define _H_DEFINE_SC_HMI_TYPE

#include "project.h"
#include "global.h"
#include "rte_types.h"

/* USER CODE START SC_HMI_INCLUDES */

/* USER CODE END SC_HMI_INCLUDES */



/**********************************************************************
 *       Type Definition for SC_HMI signal    
 **********************************************************************/

/* USER CODE START SC_HMI_USERDEFINITIONS */

/* USER CODE END SC_HMI_USERDEFINITIONS */

typedef 
/* USER CODE START SC_HMI_SIGNALDATADEFINITION */
struct
{
	
} 
/* USER CODE END SC_HMI_SIGNALDATADEFINITION */
SC_HMI_data_t;

/* USER CODE START InitSC_HMI */

#define SC_HMI_INIT_DATA ((SC_HMI_data_t){})
/* USER CODE END InitSC_HMI */




/**
 * Default OUT driver API
 * \param const SC_HMI_data_t  *const data : [IN] signal data for the driver, will be scaled in this function
 * \return RC_SUCCESS is all was ok, error code otherwise
 */
RC_t SC_HMI_driverOut(const SC_HMI_data_t  *const data);


/* USER CODE START SC_HMI_USERFUNCTIONS */

/* USER CODE END SC_HMI_USERFUNCTIONS */


#endif