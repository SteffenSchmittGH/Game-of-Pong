
/*
 * Filename: sc_hmi_type.h
 *
 * Author: Autogenerated by H-DA RTE Generator, (c) Prof. Fromm
 */

#ifndef _H_DEFINE_SC_HMI_TYPE
#define _H_DEFINE_SC_HMI_TYPE

#include "project.h"
#include "global.h"
#include "rte_types.h"

/* USER CODE START SC_HMI_INCLUDES */

/* USER CODE END SC_HMI_INCLUDES */



/**********************************************************************
 *       Type Definition for SC_HMI signal    
 **********************************************************************/

/* USER CODE START SC_HMI_USERDEFINITIONS */
typedef struct {
    uint16_t bat_1_x_position;
    uint16_t bat_1_y_position;
    uint16_t bat_1_x_old_position;
    uint16_t bat_1_y_old_position;
    uint16_t bat_2_x_position;
    uint16_t bat_2_y_position;
    uint16_t bat_2_x_old_position;
    uint16_t bat_2_y_old_position;
    uint16_t ball_x_position;
    uint16_t ball_y_position;
}PONG_t;
/* USER CODE END SC_HMI_USERDEFINITIONS */

typedef 
/* USER CODE START SC_HMI_SIGNALDATADEFINITION */
struct
{
    PONG_t pong;
    boolean_t clear_screen;
    boolean_t update_menue;
    boolean_t update_game;
    boolean_t update_pause;
    boolean_t menue_curser;
} 
/* USER CODE END SC_HMI_SIGNALDATADEFINITION */
SC_HMI_data_t;

/* USER CODE START InitSC_HMI */

/* USER CODE START InitSC_HMI */

#define SC_HMI_INIT_DATA ((SC_HMI_data_t){                                         \
    .pong = {                                                                      \
        .bat_1_x_position = LIMIT_X_HORIZONTAL_TFT_MAX,                            \
        .bat_1_y_position = BAT_Y_START_POSITION,                                  \
        .bat_1_x_old_position = LIMIT_X_HORIZONTAL_TFT_MAX,                        \
        .bat_1_y_old_position = BAT_Y_START_POSITION,                              \
        .bat_2_x_position = LIMIT_X_HORIZONTAL_TFT_MIN,                            \
        .bat_2_y_position = BAT_Y_START_POSITION,                                  \
        .bat_2_x_old_position = LIMIT_X_HORIZONTAL_TFT_MIN,                        \
        .bat_2_y_old_position = BAT_Y_START_POSITION,                              \
        .ball_x_position = BALL_X_START_POSITION,                                  \
        .ball_y_position = BALL_Y_START_POSITION                                   \
    },                                                                             \
    .clear_screen = FALSE,                                                         \
    .update_menue = FALSE,                                                         \
    .update_game = FALSE,                                                          \
    .update_pause = FALSE,                                                         \
    .menue_curser = FALSE                                                          \
})
/* USER CODE END InitSC_HMI */

/* USER CODE END InitSC_HMI */




/**
 * Default OUT driver API
 * \param const SC_HMI_data_t  *const data : [IN] signal data for the driver, will be scaled in this function
 * \return RC_SUCCESS is all was ok, error code otherwise
 */
RC_t SC_HMI_driverOut(const SC_HMI_data_t  *const data);


/* USER CODE START SC_HMI_USERFUNCTIONS */

/* USER CODE END SC_HMI_USERFUNCTIONS */


#endif